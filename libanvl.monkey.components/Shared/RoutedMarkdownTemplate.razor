@inject NavigationManager NavigationManager
@inject SourceContentHttpClient ContentClient
@inject MarkdownParser Markdown

@if (PageRoute is not null)
{
    @if (ready)
    {
        @if (published && Found is not null)
        {
            @Found(new MarkdownTemplateContext(meta ?? new PageMatter(), content));
        }
        else
        {
            @NotFound
        }
    }
    else
    {
        @Loading
    }
}

@code {
    private PageMatter? meta;
    private MarkupString content;
    private bool ready = false;
    private bool published = false;

    [Parameter]
    public string? PageRoute { get; set; }

    [Parameter] public RenderFragment<MarkdownTemplateContext>? Found { get; set; }

    [Parameter] public RenderFragment? NotFound { get; set; }

    [Parameter] public RenderFragment? Loading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (PageRoute is null)
        {
            return;
        }

        ready = false;

        ArgumentNullException.ThrowIfNull(ContentClient);
        ArgumentNullException.ThrowIfNull(Markdown);

        try
        {
            var source = await ContentClient.GetMarkdownPageAsync(PageRoute);
            (meta, content) = await Markdown.ParseAsync<PageMatter>(source);
            published = meta.Published;
            ready = true;
        }
        catch
        {
            NavigationManager.NavigateTo("404");
        }
    }
}